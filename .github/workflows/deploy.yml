name: Deploy Engagement Dashboard

on:
  push:
    branches:
      - main
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_APP_TOKEN: ${{ secrets.SLACK_APP_TOKEN }}
          HIBOBSECRET: ${{ secrets.HIBOB_API_KEY }}
          HIBOBSERVICE: ${{ secrets.HIBOB_SERVICE_USER_ID }}
          HIBOB_BASE: ${{ secrets.HIBOB_BASE_URL }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: 22
          script: |
            cd ~/n8n

            # Pull latest changes
            if [ ! -d "tools/engagement-dashboard" ]; then
              mkdir -p tools
              cd tools
              git clone https://github.com/lukealgo/engagement-dashboard.git engagement-dashboard
              cd ..
            else
              cd tools/engagement-dashboard
              git pull origin master || git pull origin main || (cd .. && rm -rf engagement-dashboard && git clone https://github.com/lukealgo/engagement-dashboard.git engagement-dashboard)
              cd ../..
            fi

            # Create .env file with secrets
            cat > tools/engagement-dashboard/.env << EOF
            SLACK_BOT_TOKEN=${SLACK_BOT_TOKEN}
            SLACK_APP_TOKEN=${SLACK_APP_TOKEN}
            HIBOBSECRET=${HIBOBSECRET}
            HIBOBSERVICE=${HIBOBSERVICE}
            HIBOB_BASE=${HIBOB_BASE:-https://api.hibob.com}
            DATABASE_URL=${DATABASE_URL:-/app/data/engagement.db}
            NODE_ENV=production
            PORT=3001
            EOF

            # Stop and remove container but preserve volume
            docker compose stop engagement-dashboard || true
            docker compose rm -f engagement-dashboard || true

            # Force rebuild the image (no cache) and start new container
            docker compose build --no-cache engagement-dashboard
            docker compose up -d engagement-dashboard
            
            # Clean up unused images
            docker image prune -f
            
            # Check if service is running and capture logs
            sleep 15
            docker compose ps engagement-dashboard

            # Check container logs for any errors
            echo "Checking container logs for errors:"
            docker compose logs engagement-dashboard | tail -50

            # Wait a bit more and check status again
            sleep 10
            echo "Container status after additional wait:"
            docker compose ps engagement-dashboard

            # If container is still restarting, show recent logs
            if docker compose ps engagement-dashboard | grep -q "Restarting"; then
              echo "❌ Container is still restarting. Showing recent logs:"
              docker compose logs --tail=100 engagement-dashboard
              exit 1
            fi

            # Verify the client files were built correctly
            echo "Checking client files in container:"
            docker compose exec engagement-dashboard ls -la /app/client/dist/
            docker compose exec engagement-dashboard head -5 /app/client/dist/index.html

            # Verify database volume persistence
            echo "Checking database persistence:"
            docker compose exec engagement-dashboard ls -la /app/data/
            echo "Database file size (should persist between deployments):"
            docker compose exec engagement-dashboard stat /app/data/engagement.db 2>/dev/null || echo "Database file not found - will be created on first sync"